/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.alignment;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import javax.swing.ImageIcon;
import nava.utils.GraphicsUtils;
import nava.utils.Utils;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class AlignmentNamePanel extends javax.swing.JPanel implements MouseListener {

    ImageIcon sortAscIcon = new ImageIcon(ClassLoader.getSystemResource("resources/icons/sort_asc.png"));
    ImageIcon sortDescIcon = new ImageIcon(ClassLoader.getSystemResource("resources/icons/sort_desc.png"));
    ImageIcon sortOrigIcon = new ImageIcon(ClassLoader.getSystemResource("resources/icons/sort_orig.png"));
    AlignmentModel alignmentModel;
    Color fontNumberingColor = Color.gray;
    Color fontColor = Color.black;
    Rectangle visibleRect = null;

    /**
     * Creates new form SequenceNamePanel
     */
    public AlignmentNamePanel(AlignmentModel alignmentModel) {
        initComponents();
        this.alignmentModel = alignmentModel;

        addMouseListener(this);
    }

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        g2.setFont(AlignmentPanel.fontDroidSansMono);

        g2.setColor(Color.white);
        g2.fill(new Rectangle2D.Double(0, 0, getWidth(), getHeight()));

        if (visibleRect != null) {
            int startSeq = (int) (visibleRect.y / AlignmentPanel.blockHeight);
            int endSeq = Math.min(startSeq + (int) (visibleRect.height / AlignmentPanel.blockHeight) + 2, alignmentModel.getSize());
            double yoffset = (int) (startSeq * AlignmentPanel.blockHeight) - visibleRect.y;

            int padding = (int) Math.log10(alignmentModel.getSize()) + 2;
            int j = 0;
            int n = 0;
            for (int seq = startSeq; seq < endSeq; seq++) {
                AlignmentModel.ItemRange itemRange = alignmentModel.getItemRange(seq);
                double y = AlignmentPanel.rulerHeight + yoffset + j * AlignmentPanel.blockHeight;
                if (itemRange.mod == 0) {
                    // draw horizontal line
                    g2.setColor(new Color(255, 130, 130));
                    Line2D.Double hr = new Line2D.Double(0, y, getWidth(), y);
                    g2.draw(hr);
                    // draw seq no
                    g2.setColor(fontNumberingColor);
                    GraphicsUtils.drawStringVerticallyCentred(g2, 4, y + (AlignmentPanel.blockHeight / 2), Utils.padStringRight((alignmentModel.itemCount[seq] + 1) + "", padding, ' '));

                    g2.setColor(fontColor);
                    GraphicsUtils.drawStringVerticallyCentred(g2, 4, y + (AlignmentPanel.blockHeight / 2), Utils.padStringRight("", padding, ' ') + alignmentModel.getElementNameAt(seq) + "");
                }

                j++;
            }
            g2.setColor(Color.white);
            g2.fill(new Rectangle.Double(0, 0, getWidth(), AlignmentPanel.rulerHeight));
            
            switch (AlignmentModel.sortOrder) {
                case AlignmentModel.ASCENDING:
                    g2.draw(new Line2D.Double(0, visibleRect.height, getWidth(), visibleRect.height));
                    g2.drawImage(sortAscIcon.getImage(), 1, 1, this);
                    break;
                case AlignmentModel.DESCENDING:
                    g2.draw(new Line2D.Double(0, visibleRect.height, getWidth(), visibleRect.height));
                    g2.drawImage(sortDescIcon.getImage(), 1, 1, this);
                    break;
                case AlignmentModel.NOT_SORTED:
                    g2.draw(new Line2D.Double(0, visibleRect.height, getWidth(), visibleRect.height));
                    g2.drawImage(sortOrigIcon.getImage(), 1, 1, this);
                    break;
            }
            
            

            g2.setColor(this.getBackground());
            g2.fill(new Rectangle.Double(0, visibleRect.height, getWidth(), 100));
        }
    }

    /**
     * Set the range of sequences to display.
     *
     * @param startSeq
     * @param endSeq
     */
    public void setVisibleRect(Rectangle visibleRect) {
        this.visibleRect = visibleRect;
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        switch (AlignmentModel.sortOrder) {
            case AlignmentModel.ASCENDING:
                alignmentModel.sort(AlignmentModel.DESCENDING);
                repaint();
                break;
            case AlignmentModel.DESCENDING:
                alignmentModel.sort(AlignmentModel.NOT_SORTED);
                repaint();
                break;
            case AlignmentModel.NOT_SORTED:
                alignmentModel.sort(AlignmentModel.ASCENDING);
                repaint();
                break;
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
}
