/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.alignment;

import java.awt.*;
import java.awt.geom.Rectangle2D;
import nava.data.types.Sequence;
import nava.utils.GraphicsUtils;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class AlignmentPanel extends javax.swing.JPanel {

    double blockHeight = 20;
    double blockWidth = 20;
    SequenceListModel sequenceModel;

    /**
     * Creates new form AlignmentPanel
     */
    public AlignmentPanel(SequenceListModel sequenceModel) {
        initComponents();
        this.sequenceModel = sequenceModel;
        this.setPreferredSize(new Dimension(50000, 50000));
    }

    @Override
    public void paintComponent(Graphics g) {
        int length = sequenceModel.sequences.get(0).getSequence().length();
        int numSequences = sequenceModel.getSize();
        setPreferredSize(new Dimension((int) (length * blockWidth), (int) (numSequences * blockHeight)));
        Rectangle viewableRect = g.getClipBounds();


        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        g2.setColor(Color.white);
        g2.fill(new Rectangle2D.Double(viewableRect.x, viewableRect.y, viewableRect.width, viewableRect.height));

        int startNuc = (int) (viewableRect.x / blockWidth);
        int endNuc = Math.min(length, (int) ((viewableRect.x + viewableRect.width) / blockWidth)+1);
        int startSeq = (int) (viewableRect.y / blockHeight);
        int endSeq = Math.min(numSequences, (int) ((viewableRect.y + viewableRect.height) / blockHeight)+1);
        System.out.println(startNuc + "\t" + endNuc + "\t" + startSeq + "\t" + endSeq);
        for (int seq = startSeq; seq < endSeq; seq++) {
            String sequence = sequenceModel.getElementAt(seq).getSequence();
            for (int nuc = startNuc; nuc < endNuc; nuc++) {
                Rectangle2D.Double block = new Rectangle2D.Double(nuc * blockWidth, seq * blockHeight, blockWidth, blockHeight);
                //if(seq == startSeq )
                g2.setColor(getNucleotideColor(sequence.charAt(nuc)));
                g2.fill(block);
                g2.setColor(Color.black);
                g2.draw(block);
                GraphicsUtils.drawStringCentred(g2, nuc * blockWidth+(blockWidth/2), seq * blockHeight+(blockHeight/2), sequence.charAt(nuc)+"");
            }
        }
    }
    
    public static Color getNucleotideColor(char c)
    {
        char n = Character.toUpperCase(c);
        switch(n)
        {
            case 'A':
                return Color.red;
            case 'C':
                return Color.cyan;
            case 'G':
                return Color.yellow;
            case 'T':
                return Color.green;
            default:
                return Color.white;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
