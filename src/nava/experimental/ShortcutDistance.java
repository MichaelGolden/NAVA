/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.experimental;

import java.util.Random;
import nava.utils.RNAFoldingTools;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class ShortcutDistance {

    public static final int EMPTY_VALUE = Short.MAX_VALUE;
    short[][] distanceMatrix;
    int[] pairedSites;

    public ShortcutDistance(int[] pairedSites) {
        this.pairedSites = pairedSites;
        distanceMatrix = new short[pairedSites.length][pairedSites.length];

        for (int i = 0; i < distanceMatrix.length; i++) {
            for (int j = 0; j < distanceMatrix.length; j++) {
                distanceMatrix[i][j] = EMPTY_VALUE;
            }
        }

        for (int i = 0; i < pairedSites.length - 1; i++) {
            distanceMatrix[i][i + 1] = 1;
            distanceMatrix[i + 1][i] = 1;
        }
        for (int i = 0; i < pairedSites.length; i++) {
            if (pairedSites[i] != 0) {
                distanceMatrix[i][pairedSites[i] - 1] = 1;
                distanceMatrix[pairedSites[i] - 1][i] = 1;
            }
        }


        /*
        int start = -1;
        int end = -1;
        for (int i = 0; i < pairedSites.length; i++) {
            if (start == -1 && pairedSites[i] == 0) {
                start = i;
                end = i;
            } else if (start != -1 && pairedSites[i] == 0) {
                end = i;
            } else if (start != -1 && end != -1) {
                System.out.println(start + "-" + end);
                for (int x = start; x <= end; x++) {
                    for (int y = x + 1; y <= end; y++) {
                        String dbs = "(................)";
                        //012345678901235678
                        int distanceFromEnd = (x - (start - 1)) + (end + 1 - y); // this may be too conservative
                        int distance = Math.abs(x - y);
                        if (distance <= distanceFromEnd + 1) // only required for pseudoknots
                        {
                            distanceMatrix[x][y] = (short) distance;
                            distanceMatrix[y][x] = (short) distance;
                        }
                    }
                }
            }


        }*/



        System.out.println(distanceMatrix.length);
        /*
        for (int k = 0; k < distanceMatrix.length; k++) {
            System.out.println("k="+((double)(k)/(double)(distanceMatrix.length)));
            for (int i = 0; i < distanceMatrix.length; i++) {
                for (int j = i+1; j < distanceMatrix.length; j++) {
                    distanceMatrix[i][j] = (short)Math.min(distanceMatrix[i][j], distanceMatrix[i][k]+distanceMatrix[k][j]);
                    distanceMatrix[j][i] = distanceMatrix[i][j];
                }
            }
        }
        * 
        */

        printMatrix();
    }

    public void printMatrix() {
        for (int i = 0; i < distanceMatrix.length; i++) {
            for (int j = 0; j < distanceMatrix.length; j++) {
                System.out.print(i + "," + j + "," + distanceMatrix[i][j] + "\t");
            }
            System.out.println();
        }
    }

    public short shortcutDistance(int i, int j) {
        if (i == j) {
            return 0;
        }

        if (distanceMatrix[i][j] != EMPTY_VALUE) {
            return distanceMatrix[i][j];
        } else {

            //System.out.println(i + "," + j);
            int bestDistance = Short.MAX_VALUE;

            
            int start = Math.min(i, j);
            int end = Math.max(i, j);
            
            if(start + 1 < j)
            {
                //System.out.println(start+"\t"+j);
                bestDistance = Math.min(bestDistance, 1+shortcutDistance(start+1,j));
               // System.out.println("XX");
            }
            
            if(start - 1 >= 0)
            {
                  bestDistance = Math.min(bestDistance, 1+shortcutDistance(start-1,j));
            }
            
            if(pairedSites[start] != 0)
            {
               // bestDistance = Math.min(bestDistance, 1+shortcutDistance(pairedSites[i]-1,j));
            }

            /*
             * for(int k = 0 ; k < pairedSites.length ; k++) { if(i != k) {
             * bestDistance =
             * Math.min(bestDistance,shortcutDistance(i,k)+shortcutDistance(j,k));
             * }
            }
             */

            System.out.println("here");
            distanceMatrix[i][j] = (short) bestDistance;
            distanceMatrix[j][i] = (short) bestDistance;

            return distanceMatrix[i][j];
        }
    }

    public static void main(String[] args) {
        String dbs = "(................)";
        //012345678901234567
       // String dbs = "...(((((((((((((........(((...((((((......))))))..))).)))))).)))))))(((.(((((((((((.....))))))))))).)))..........((((((.....))))))........((......)).((((((......(((((((((.....)))))))))......)))))).(((((..((((((((.(((..(((((((...))))))).)))))))))..))..))))).....((((((((((((..........))))...)))))))).((....)).....((((((.((((((.....))))))....))))))..((((....)))).....(((((((((((((((......(((...(((......))).)))..))))))))))..))))).((.((..(((((((......(((.(((.(((....)))))).)))..))))))).)).))...(((((...(((.(((((..((((((((((((.((..((....(((((((.(((....((.........)).))).((((((((((((.(((..((((((..(((((.((..((.((....(((...((..(((((((((..(((..((((.((...((((......))))......))....))))....))).(((((((...(((((.((.........)).))))).))))))).(.((((((((((((((....)).)).))).(((((((.((((((((.....)))).((((.((.(((...........))).))..))))..)))).)))))))((((((....((((((.(((((.((..((((((....((.((((((((((((...((((((.........))))))..))((((((.((((.((((((.((......)))))))).((((((.((.(((.((.(((((.((.(((.((((..((.((..((((((..((.((((....))))..((((((((((.(((....((((.......)))).....))).))))..(((((........)))))))))))))...)))))).......))...)).)))).)))....)).)).)))........)))))...)).)))))).((((..((((...)))).)))).))))...))))))..((((((((((......)))))))))).....)))))))))).))..))))))..))..))))).)).)))))))))).)))).))).)..)))))))))))..))).....)).)).)).)).))).)))))).)))..........)))))))).)))))))))))...))..)).((.((..(((..........)))..)).)).((((((((................)))))))).))))))))))))...))))).))).)))))..((((...((((((((((((.(((((((...(((((.((.((((....))))..)).)))))....)))))))...(((.((.(((.......))).)))))..(((((.(((((..((((..((((((((...(((.......)))(..(((((((.....)))))))..).(((((...(((...((((((((.((.....(((.(..((((((((((...((......((.(((.....))).)).......)).....))))))......))))).)))..)).))))))))..))).))))).))))).)))..))))..))...)))......))))).((((((.(((((.((((.......(((((((.((.......)).(((((.............)))))...(((((.......)))))))))))).......)))).)))))...(((((((.((((.......)))).)))))))))))))...((((............))))...)))))))).((.((((((((((((((..........)))))...))))))))).))...))))...))))....(((..(((...((.(((((((...(((..((((((........((..(((((.((......)).))))).))..)))))).))).)))))))..)).)))))).((((((((..((..(((.((((((.((.(((((.(((.((((((.(((.((..((((...((((((.......(((...(((((((.....((((((((..(((..((.((((((.((((....))))((...(((.((((((...((((((((((((..(((((......(((...((((.......))))....)))....))))).....)))))))))))).(((((((((((((.((((.((((((.((((.....((((.......((((.(((...(((((((((.((....)).(((....))).(((((....)))))...((..((((...(((..(((((((((.((..(((.((.((((......)))).))..))).)).....))))))))).)))((((.(((....(((.((((((...)))))).)))..((.....))...))).))))(((((.....((..((........))..)).....))))))))).)).((((...((((((((....(((.(((((.....(((((((.(((....(((((((.........)))))))......)))(((((((((......(((((((((...((((..........(((((.....((((((((.......((((....((((((((((.....(((.((((.....(((((((((......(((...((((((((.((((...(((.....))).))))))))))))..)))..))))..(((((((..(((..((((.((((((((((((.(((....)))...)))......))))))))).))))..)))...((..(((((...(((....)))(((.(((......))).)))....((.((((....)))).)).))))).....))...((((((((((.(((....))).)))))))))))))))))..))))).....)))))))((((((....................(((.((((.....))))....)))))))))..))))))))))....)))).((((..(((((.......)))))......)))).(((.((((((....)))))))))....))))))))..))))).........))))......)))))..))))...)).((((((((.((((((.(((((((((((.((.....)).)))))..((.(((((((((((((..((....))..((((((((((((((...(((((((((...((((..(((((...(((......)))...))))).((((..((.......))..))))(((((((..((((((((((((......)))..))))))....))).....)))))))...))))....)))))))))..((.((((((...((((((...............))))))...)))))).)).)))))..))).)))))).(((((((((.........)))...)))))).(((.(((((((((..(((...((((((...((((((((((..(((((((.((.((.(((((..(((...(((..((((((((..(((((((((.((((.((.(((((((((((((.((((((((.((..(((((................)))))..))((((((.((((((((((.((..((((..((((((..(((((((.((......)))))))))......))))))((((.(((((.(((..(((...........)))))))))))...)))).(((((((((((.((((.((((((..((((.((((((....((((....(((((((((.(((((((((.((..(((((.(((.......))).))))).(((.......)))......)).))).))))))))))))))).))))..))))))))))..))))))...)))).)))).....)))))))((((((((((((((((((..(((.(((..(((...))).(((.((((((.((((((.........)))))).)))).((((((...(((((((.((....))))))))))))))).)).)))((((.......))))....(((.((((((..((((((..(((((((...((((..(((.((..((((.((..(((..(((...........)))..)))..))...))))..)).)))........)))).....))))).........((..((((...))))....)).((((((..(((((((..(((((((.(((...))).)))).(((((((..........(((((((((((...(((.(((((......((((((((((........(((.........))).....))))))...)))).))))).)))..)).))))))))).....))))))))))..)))))))..)))))).))..))))))...)))))).))).((((((((((((((.((((....))))..(((.............))).(((..((((((.((....(((((((..((((.....)))).((((.....(((((.((......))..(((((((((.((((((.(((....(((.....(((((((..............(((((...(((((((((((.....((((((.....((((.(((.(((..((....)).)))...)))...))))...(((((((.((((((.((.....(((((((((...(((((((.((.(((.((((..((.(((((...((.....))((((((.(((((.((.......(((......))).(((((...(((.......)))...((((((((.......(((.....(((...(((.(((.....((((....))))..))).))).....))).)))...))))))))(((((.((((....(((((((((((...........))))..(((((.......))))).)))))))..))))))))).....((((((......(((((((((((((.(((.(((....((((((..(((..............)))..))))))......)))((..((((..........))))...))..(((.(((((((((.((((.((((((...)).))))..))))((...(((((((((((..((.((((........)))).))((((........)))).))).)))))))).....))((((((.......)).))))......)))))..)))).))).((((((((...((((..((.(((..((((...)))).....))).....))....))))..))))...))))..))).(((....))))))))))))))))..))))))))))).(((((....(((..(((((...((......))..((.(((((..((...((((.((....)).))))..)).))))).)).(((((((((.....))))))))).(((....((((((((((..(((..((....))..((((((((......((((.....((((((.......))))))......))))...)))))))).))))))))))))).......)))..))).))...)))((((((((((.......))))))..((((((....))))))...)))).)))))(((..(((.((..(((.......(((.(((.......))).)))..))))).))).)))..)).))))).)).))))..)))))...))..((((....)))))))).)))...))..))).((.....))....))))..))))))))).....))..)))))).(((..........)))(((....))).))))))).(((((((((.(((....))).))).))))))..(((((.....)))))..))))))...)))).....((..((((.((((.(((((((..(((............))).)))))...............))...)))).))))...))..)).)))))...(((...........)))))))).............)))))))))).....))).)))))).)))...))))))....)))))...))))..))))))).))))))))....))).....)))))...))))))))).))).)))..)))))))..)))))...)))))))))).)).))...))))))))))))))((((((((((....(((((.....)))))(((((..(((((.....((..(((((((((((((........((((..((.((((((((((.((.((.(((((((((((..(((((((((..((((((.((.((((((...((....((.((((...((.(((..((((((((((.((((((((((....))))))))))..))).(((((((((((.(((......)))...))))))))))))))))))...((((((.((.((((((.....))))))....))))))))....))).)).)))).....)).....))..)))))).)).)))))).))).))))((((((.......))))))..)).))))))))))).))...)).....)))))...))))).))))))........))))..)))))))))....))........))))).)))))...)))))))).))..))))))))..)))))))))).....((..(((((....)))))..))..))).....)).))))))))))))).))))..((((.(((((.(((.....))).)))))(((..((........)).))).(((((...(((.....((((((((((((((.....(((((((....((((((.......((((....)))).........))))))........))))))).......))))))....)))))))).)))....)))))..))))...((((.(((.(((..(((((.((((.((((...........)))).))))....((((..(((((......(((((....(((......(((........)))....))).)))))....)))))..)))).))))).(((((((.(((.(((((((((((((.....))))....(((((((...........((((((((.....((((....(((..((((((........))))))..)))))))...(((.((....((.(((((.((.(((((.((..((((((((((..((((((....))))))...))))))))))....)).....)))))..))))))).)).....)).))).(((.(((....((((.((.......((((((......(((((.....((((((((.((((((((..(((((........((((...((((....))))......)))).......)))))((((.............))))...(((((((((((((...(((.(((((...((((.....((((.(((...((......)).))).)))).)))).((.(((((((..((((...........)))))))).))).)))))))..((((......))))((....))((...............)).)))..))))))).(((((((((......((((.(((..(((((((((((.(((...(((.....)))....))))))))))))))..(((((....)).)))....((((((((((..((((((....(((((.(((.((((((..(((((..((.((((((((......(((((..(((((((...)))))..))..)))))....)))))))).))...(((((...........(((((.(((((..((((..........((((.((.......(((((((((..((((((((((.......)))))))...(((((...((((.((((..(((........((((.(((.((..(((((((.(((((((((..(((...)))..)))..)))))).)))....))))((((.....(((.(((((((((........)))))...))))........)))....))))..))))).)))).......))))))).....)))))))))...((......((((((...(((((.......(((.((((....)))).)))......)))))......(((((.....)))))))))))......))..((((...)))).))).))))))))).....)).)))).........))))....(((((((((......)))))))))..))))).)))))......)))))...))))))))))).((.....))((((.....)))).)))...(((.(((.(((.(((....))).))).........))).))).((..(((((...((((((((((...((((((((.............))))).(((((.((.........)).)))))....))).....))))...))))))....)))))..))...)))))...)))))).((((((((....)).))))))..(((((.((..(((((...((((((...(((.....(((.....)))...))).)))))).))))).)).)))))...)))))))))).(((((.(((...((((((...)))))).((..........)).((.(((((....(((((...((((.....)))).)))))...)))))...)).)))...)))))..))).)))).))))))))).))))))))))))))...(((.(((............))).)))...))))))))...)))))......))))))......)).)))).))).)))..((((......)))))))))))))))))))..))))))))).))).))))))).((..((.....))......)).((((...((((..........))))......)))).))).))))))).((((.........(((((..........)))))..............)))).))))..)))..)))))))).))))...)))))..(((.(((((((((.(((..((((((......(((..(((((((....((...((.(((.....))).)).))......)))))))..)))..))))))..)))...))))))))))))((........)).)).))))))))))..(((......)))....(((......)))(((....(((((((.........((((.(((((..((...))..)))))))))...))))))).))).))))))...)))..))))))))).))).)))))).....))))))).))...)))))))))))).))))))))....))))))).((.(((...(((((((((.....))))))))).))).))...))))))).))))))))))))))))((((...(((.......(((((((..((((((.(((.((((..................))))...))).))))))..)).))))).....))).)))).)))))))))))))...))).))))...))))((((((..(((((((((((.((.(((.....((....))....)))..)).)))))).)))))((((((((((((.(((.(((((((((.((.....)).)))..))))))..)))....)))))))))))).(((...))).))))))...))))..))))))))))...)))).((..((((((....((((((.....(((.((((((((((((.....))).)))))))))...)))........))))))....))))))..)).((((..((((...(((....((((((.(((((.(((.....(((((((.((.....(((((..((((....)))).)))))...))...)))))))..(((....)))...((.(((........((..(((((..(((........))))))))((((......))))))..))).))..(((((.....(((.((((...........(((((.....(((.(((((((....))))))))))))))))))))))....))))).)))...))))).))))))....))).)))).))))))).))))))...((......))....)))))).)))..)))))))).))..)))...))))))))..)))))))....)))..))))))...))))....))...))).))))))...))).))))).........((((........))))...))..)))))).))).))))))))))((((((((((((((((.......)))......)))))))))))))..(((((....))))).";
        int[] pairedSites = RNAFoldingTools.getPairedSitesFromDotBracketString(dbs);
        ShortcutDistance shortcutDistance = new ShortcutDistance(pairedSites);
        for (int i = 0; i < pairedSites.length; i++) {
            if (pairedSites[i] != 0) {
                // System.out.println("(" + (i + 1) + ", " + pairedSites[i] + ", " + shortcutDistance.shortcutDistance(i, pairedSites[i] - 1) + ")");
            }
        }
        Random random = new Random(8193707410175024072L);
        for (int i = 0; i < 1; i++) {
            int x = random.nextInt(pairedSites.length);
            int y = random.nextInt(pairedSites.length);
            int swap = x;
            if (x > y) {
                x = y;
                y = swap;
            }
            // x = 1;
            //y = 5;
            System.out.println("d(" + x + ", " + y + ") = " + shortcutDistance.shortcutDistance(x, y) + "");
            shortcutDistance.printMatrix();
        }
    }
}
