/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.structurevis;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import nava.data.types.Annotations;
import nava.data.types.DataSource;
import nava.data.types.Tabular;
import nava.structurevis.data.AnnotationSource;
import nava.ui.ProjectModel;
import org.biojava.bio.BioException;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class AnnotationsPanel extends javax.swing.JPanel implements ItemListener {

    DefaultComboBoxModel<Annotations> annotationsComboBoxModel = new DefaultComboBoxModel<>();
    ProjectModel projectModel;

    Annotations annotations = null;
    
    /**
     * Creates new form AnnotationsPanel
     */
    public AnnotationsPanel(ProjectModel projectModel) {
        initComponents();
        this.projectModel = projectModel;

        this.annotationsSourceComboBox.setModel(annotationsComboBoxModel);
        this.annotationsSourceComboBox.addItemListener(this);

        populateAnnotationsSourceComboBox(projectModel.dataSources.getArrayListShallowCopy());
    }

    public void populateAnnotationsSourceComboBox(List<DataSource> dataSources) {
        annotationsComboBoxModel.removeAllElements();
        for (int i = 0; i < dataSources.size(); i++) {
            if (dataSources.get(i) instanceof Annotations) {
                annotationsComboBoxModel.addElement((Annotations) dataSources.get(i));
            }
        }
    }
    
    public AnnotationSource getAnnotationsSource()
    {
        if(annotations != null)
        {
            try {
                return AnnotationSource.readAnnotations(new File(annotations.getImportedDataSourcePath(projectModel.getProjectPathString())));
            } catch (BioException ex) {
                Logger.getLogger(AnnotationsPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(AnnotationsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        annotationsSourceComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        annotationsSourceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Select data source");

        jButton1.setText("Add from file");

        jLabel2.setText("or");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(annotationsSourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annotationsSourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox annotationsSourceComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void itemStateChanged(ItemEvent e) {
        if(e.getSource().equals(annotationsSourceComboBox))
        {
            annotations = (Annotations) annotationsSourceComboBox.getSelectedItem();
        }
    }
}
