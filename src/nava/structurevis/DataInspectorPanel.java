/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.structurevis;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import nava.data.io.DataExport;
import nava.data.io.DataExport.ExportableFormat;
import nava.data.types.DataSource;
import nava.data.types.DataType;
import nava.ui.MainFrame;
import nava.utils.CustomJCheckBoxItem;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class DataInspectorPanel extends javax.swing.JPanel implements ItemListener {

    ArrayList<DataSource> selectedDataSources = new ArrayList<>();
    DataExport dataExport = new DataExport();
    ArrayList<ExportableFormat> exportableFormats = new ArrayList<>();
    ArrayList<CustomJCheckBoxItem> exportCheckBoxes = new ArrayList<>();
    String defaultExportPrefix = "export";

    /**
     * Creates new form DataInspectorPanel
     */
    public DataInspectorPanel() {
        initComponents();
        browseField.setText(System.getProperty("user.dir") + File.separator + defaultExportPrefix);
    }

    public void updatePanel(DataSource dataSource) {
        selectedDataSources.clear();
        selectedDataSources.add(dataSource);
        exportableFormats = dataExport.getExportableFormats(dataSource);

        exportPanel.removeAll();
        exportCheckBoxes.clear();
        for (ExportableFormat exportableFormat : exportableFormats) {
            CustomJCheckBoxItem<ExportableFormat> checkbox = new CustomJCheckBoxItem(exportableFormat.exportFormat.toString() + " (." + exportableFormat.exportFormat.getExtension() + ")");
            checkbox.addItemListener(this);
            checkbox.setObject(exportableFormat);
            exportPanel.add(checkbox);
            exportCheckBoxes.add(checkbox);
            browseField.setText(System.getProperty("user.dir") + File.separator+ exportableFormat.groupName);
        }
        exportPanel.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        exportPanel = new javax.swing.JPanel();
        exportButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();
        browseField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Properties"));

        jLabel1.setText("Data type");

        jLabel2.setText("Icon and data type");
        jLabel2.setMaximumSize(new java.awt.Dimension(34, 16));
        jLabel2.setMinimumSize(new java.awt.Dimension(34, 16));
        jLabel2.setPreferredSize(new java.awt.Dimension(34, 16));

        jLabel3.setText("Title");

        jTextField1.setText("jTextField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 190, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Export Options"));

        exportPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        browseField.setText("jTextField2");

        jLabel4.setText("Export prefix");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(browseField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(exportButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(browseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(exportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(exportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseButton)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(browseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        File file = new File(browseField.getText());
        File directory = file;
        if (!file.isDirectory()) {
            directory = file.getParentFile();
        } else {
            browseField.setText(browseField.getText() + defaultExportPrefix);
        }
        if (!directory.exists() && directory.mkdir()) {
            JOptionPane.showMessageDialog(this, "Export failed, the specified directory does not exist.", "Export failed", JOptionPane.WARNING_MESSAGE);
        } else {
            for (CustomJCheckBoxItem<ExportableFormat> checkbox : exportCheckBoxes) {
                ExportableFormat f = checkbox.getObject();
                for (DataSource dataSource : selectedDataSources) {
                    if (checkbox.isSelected()) {
                        File outFile = new File(browseField.getText() + "." + f.exportFormat.getExtension());
                        int i = 2;
                        while (outFile.exists()) {
                            outFile = new File(browseField.getText() + "_" + i + "." + f.exportFormat.getExtension());
                            i++;
                        }
                        try {
                            dataExport.export(dataSource, f.exportFormat, outFile);
                        } catch (Exception ex) {
                            Logger.getLogger(DataInspectorPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        MainFrame.browseDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        File currentFile = new File(browseField.getText());
        MainFrame.browseDialog.setSelectedFile(currentFile);
        String suffix = currentFile.getName();
        if (currentFile.isDirectory()) {
            suffix = "export";
            for (CustomJCheckBoxItem<ExportableFormat> checkbox : exportCheckBoxes) {
                ExportableFormat f = checkbox.getObject();
                suffix = f.groupName;
                break;
            }
        }
        int ret = MainFrame.browseDialog.showDialog(this, "Select folder");
        if (ret == JFileChooser.APPROVE_OPTION) {
            File selectedFile = MainFrame.browseDialog.getSelectedFile();
            browseField.setText(selectedFile.getAbsolutePath() + File.separatorChar + suffix);
            browseField.setSelectionStart(browseField.getText().length() - suffix.length());
            browseField.setSelectionEnd(browseField.getText().length());
        }
    }//GEN-LAST:event_browseButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField browseField;
    private javax.swing.JButton exportButton;
    private javax.swing.JPanel exportPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void itemStateChanged(ItemEvent e) {
        CustomJCheckBoxItem<ExportableFormat> item = (CustomJCheckBoxItem) e.getSource();
        System.out.println(item.getObject().groupName + "\t" + item.isSelected());
    }
}
