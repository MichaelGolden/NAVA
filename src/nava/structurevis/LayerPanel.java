/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.structurevis;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.Scrollable;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class LayerPanel extends javax.swing.JPanel implements Scrollable {

    int width = 1000;
    boolean trackWidth = true;
    int height = 0;

    /**
     * Creates new form LayerPanel
     */
    public LayerPanel() {
        initComponents();
        jSplitPane1.setDividerLocation(150);
    }

    public void updatePanel() {
        /*removeAllLayers();
        if (genomeLayer != null) {
            genomeLayer.canPin = false;
            addLayer(genomeLayer);
        }
        if (graphLayer1D != null) {
            addLayer(graphLayer1D);
        }
        for (int i = 0; i < pinnedLayers.size(); i++) {
            if (!pinnedLayers.get(i).equals(graphLayer1D)) {
                if (pinnedLayers.get(i).isPinned) {
                    addLayer(pinnedLayers.get(i));
                }
            }
        }*/
        
        refresh();
        revalidate();
        repaint();
        /*for (int i = 0; i < layers.size(); i++) {
            layers.get(i).redraw();
        }*/
    }
    
    public void refresh()
    {        
        //leftPanel.removeAll();
        //rightPanel.removeAll();
        height = 0;
        for(Layer layer : layers)
        {
            layer.refresh();
            //addLayer(layer,false);
             height += layer.getLeft().getPreferredSize().height;
             layer.getRight().setPreferredSize(layer.getLeft().getPreferredSize());
        }
    }
    
    ArrayList<Layer> layers = new ArrayList<>();
    
    public void addLayer(Layer layer, boolean add) {
        layer.parent = this;
        layer.refresh();
        if(add)
        {
            layers.add(layer);
        }
        layer.getLeft().setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));
        leftPanel.add(layer.getLeft());

        layer.getRight().setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));
        rightPanel.add(layer.getRight());

        height += layer.getLeft().getPreferredSize().height;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        leftPanel.setLayout(new javax.swing.BoxLayout(leftPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jSplitPane1.setLeftComponent(leftPanel);

        rightPanel.setLayout(new javax.swing.BoxLayout(rightPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jSplitPane1.setRightComponent(rightPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel rightPanel;
    // End of variables declaration//GEN-END:variables

    public Dimension getPreferredScrollableViewportSize() {
        return this.getPreferredSize();
        // return new Dimension(1000,100);
    }

    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
        return -1;
    }

    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
        return -1;
    }

    public boolean getScrollableTracksViewportWidth() {
        return trackWidth;
    }

    public boolean getScrollableTracksViewportHeight() {
        return false;
    }

    public void autofitWidth() {
        trackWidth = true;
        this.revalidate();
        width = getWidth();
    }

    public void resizeWidth(int width) {
        trackWidth = false;
        this.setPreferredSize(new Dimension(width, height));
        this.revalidate();
    }

    public void zoomIn() {
        width = (int) ((double) getWidth() * 1.5);
        resizeWidth(width);
    }

    public void zoomOut() {
        width = (int) ((double) getWidth() / 1.5);
        resizeWidth(width);
    }
}
