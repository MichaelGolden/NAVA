/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.structurevis;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import nava.data.types.Alignment;
import nava.data.types.DataSource;
import nava.data.types.SecondaryStructure;
import nava.data.types.SecondaryStructureData;
import nava.structurevis.data.MappingSource;
import nava.structurevis.data.StructureOverlay;
import nava.structurevis.data.StructureOverlay.MappingSourceOption;
import nava.structurevis.data.SubstructureList;
import nava.ui.MainFrame;
import nava.ui.ProjectModel;
import nava.utils.GraphicsUtils;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class StructureOverlayPanel extends javax.swing.JPanel implements ChangeListener, ItemListener, KeyListener {

    //ProjectController projectController;
    ProjectModel projectModel;
    DefaultComboBoxModel<SecondaryStructure> structureComboBoxModel = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<Alignment> alignmentComboBoxModel = new DefaultComboBoxModel<>();
    StructureOverlay structureOverlay = new StructureOverlay();
    //SpinnerNumberModel minSpinnerModel = new SpinnerNumberModel(10, 1, Integer.MAX_VALUE, 1);
    //SpinnerNumberModel maxSpinnerModel = new SpinnerNumberModel(250, 0, Integer.MAX_VALUE, 1);

    /**
     * Creates new form StructureDataPanel
     */
    public StructureOverlayPanel(ProjectModel projectModel) {
        initComponents();

        this.projectModel = projectModel;

        this.structureComboBox.setModel(structureComboBoxModel);
        this.structureComboBox.addItemListener(this);

        this.alignmentComboBox.setModel(alignmentComboBoxModel);
        this.alignmentComboBox.addItemListener(this);

        //this.minSpinner.setModel(this.minSpinnerModel);
        //this.minSpinner.addChangeListener(this);
        //this.maxSpinner.setModel(this.maxSpinnerModel);
        //this.maxSpinner.addChangeListener(this);
        circularRadioButton.addItemListener(this);
        sequenceTextField.addKeyListener(this);
        populateStructureComboBox(projectModel.dataSources.getArrayListShallowCopy());
        populateAlignmentComboBox(projectModel.dataSources.getArrayListShallowCopy());
        structureComboBox.setWide(true);
        alignmentComboBox.setWide(true);
        
        this.embeddedSequenceRadioButton.addItemListener(this);
        this.fromAlignmentRadioButton.addItemListener(this);
        this.fromSequenceRadioButton.addItemListener(this);
        
        mappingSourceTextArea.setBackground(new Color(255,255,255,0));
    }

    public void populateStructureComboBox(List<DataSource> dataSources) {
        structureComboBoxModel.removeAllElements();
        for (int i = 0; i < dataSources.size(); i++) {
            if (dataSources.get(i) instanceof SecondaryStructure) {
                structureComboBoxModel.addElement((SecondaryStructure) dataSources.get(i));
            }
        }
    }

    public void populateAlignmentComboBox(List<DataSource> dataSources) {
        alignmentComboBoxModel.removeAllElements();
        for (int i = 0; i < dataSources.size(); i++) {
            if (dataSources.get(i) instanceof Alignment) {
                alignmentComboBoxModel.addElement((Alignment) dataSources.get(i));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mappingGroup = new javax.swing.ButtonGroup();
        substructureGroup = new javax.swing.ButtonGroup();
        conformationGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        embeddedSequenceRadioButton = new javax.swing.JRadioButton();
        fromAlignmentRadioButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        fromSequenceRadioButton = new javax.swing.JRadioButton();
        sequenceTextField = new javax.swing.JTextField();
        addMappingAlignmentAsOverlayCheckBox = new javax.swing.JCheckBox();
        pasteButton = new javax.swing.JButton();
        alignmentComboBox = new nava.ui.WiderDropDownComboBox();
        mappingSourceTextArea = new javax.swing.JTextArea();
        guessBestMappingAlignmentButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        linearRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        circularRadioButton = new javax.swing.JRadioButton();
        structureComboBox = new nava.ui.WiderDropDownComboBox();

        jLabel1.setText("Select structure");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a mapping source"));

        mappingGroup.add(embeddedSequenceRadioButton);
        embeddedSequenceRadioButton.setSelected(true);
        embeddedSequenceRadioButton.setText("Use embedded sequence alignment or sequence");

        mappingGroup.add(fromAlignmentRadioButton);
        fromAlignmentRadioButton.setText("From alignment");
        fromAlignmentRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromAlignmentRadioButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Select alignment");

        mappingGroup.add(fromSequenceRadioButton);
        fromSequenceRadioButton.setText("Paste from sequence string");

        sequenceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sequenceTextFieldActionPerformed(evt);
            }
        });

        addMappingAlignmentAsOverlayCheckBox.setSelected(true);
        addMappingAlignmentAsOverlayCheckBox.setText("Add this mapping source as a nucleotide overlay");
        addMappingAlignmentAsOverlayCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMappingAlignmentAsOverlayCheckBoxActionPerformed(evt);
            }
        });

        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        alignmentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignmentComboBoxActionPerformed(evt);
            }
        });

        mappingSourceTextArea.setColumns(20);
        mappingSourceTextArea.setEditable(false);
        mappingSourceTextArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        mappingSourceTextArea.setForeground(new java.awt.Color(255, 0, 0));
        mappingSourceTextArea.setLineWrap(true);
        mappingSourceTextArea.setRows(1);
        mappingSourceTextArea.setText("This length of this mapping source (0) does not match the length of the data source (0).");
        mappingSourceTextArea.setWrapStyleWord(true);
        mappingSourceTextArea.setBorder(null);
        mappingSourceTextArea.setOpaque(false);

        guessBestMappingAlignmentButton.setText("Guess best mapping alignment (not recommended)");
        guessBestMappingAlignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessBestMappingAlignmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mappingSourceTextArea)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromSequenceRadioButton)
                            .addComponent(embeddedSequenceRadioButton)
                            .addComponent(fromAlignmentRadioButton)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(alignmentComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(guessBestMappingAlignmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                                        .addGap(77, 77, 77))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(sequenceTextField)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pasteButton))))
                            .addComponent(addMappingAlignmentAsOverlayCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(embeddedSequenceRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fromAlignmentRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(alignmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guessBestMappingAlignmentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fromSequenceRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sequenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pasteButton))
                .addGap(18, 18, 18)
                .addComponent(addMappingAlignmentAsOverlayCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mappingSourceTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Create a list of substructures"));

        jButton3.setText("Edit list");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel8.setText("A list has already been generated");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jButton3))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        conformationGroup.add(linearRadioButton);
        linearRadioButton.setSelected(true);
        linearRadioButton.setText("Linear");

        jLabel2.setText("Conformation");

        conformationGroup.add(circularRadioButton);
        circularRadioButton.setText("Circular");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(linearRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(circularRadioButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(structureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(structureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(linearRadioButton)
                    .addComponent(circularRadioButton))
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fromAlignmentRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromAlignmentRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromAlignmentRadioButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (structureOverlay != null && structureOverlay.structure != null) {
            if (structureOverlay.substructureList == null) {
                structureOverlay.substructureList = new SubstructureList(structureOverlay);
            }
            SubstructureListDialog dialog = new SubstructureListDialog(new javax.swing.JFrame(), true, structureOverlay.substructureList.clone());
            GraphicsUtils.centerWindowOnScreen(dialog);
            dialog.setVisible(true);
            if (dialog.save) {
                structureOverlay.substructureList = dialog.substructureList;
                jLabel8.setText("You have defined a list. Click to edit.");
            }

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void sequenceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sequenceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sequenceTextFieldActionPerformed

    
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        Transferable contents = clipboard.getContents(null);
        
        boolean hasTransferableText = (contents != null) && contents.isDataFlavorSupported(DataFlavor.stringFlavor);
    
        if(hasTransferableText) {
            try {
                sequenceTextField.setText((String)contents.getTransferData(DataFlavor.stringFlavor));
                fromSequenceRadioButton.setSelected(true);
            }
            catch (UnsupportedFlavorException | IOException ex){
            }
        }
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void alignmentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignmentComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alignmentComboBoxActionPerformed

    private void addMappingAlignmentAsOverlayCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMappingAlignmentAsOverlayCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addMappingAlignmentAsOverlayCheckBoxActionPerformed

    private void guessBestMappingAlignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessBestMappingAlignmentButtonActionPerformed
        this.selectBestAlignment();
    }//GEN-LAST:event_guessBestMappingAlignmentButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addMappingAlignmentAsOverlayCheckBox;
    private nava.ui.WiderDropDownComboBox alignmentComboBox;
    private javax.swing.JRadioButton circularRadioButton;
    private javax.swing.ButtonGroup conformationGroup;
    private javax.swing.JRadioButton embeddedSequenceRadioButton;
    private javax.swing.JRadioButton fromAlignmentRadioButton;
    private javax.swing.JRadioButton fromSequenceRadioButton;
    private javax.swing.JButton guessBestMappingAlignmentButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton linearRadioButton;
    private javax.swing.ButtonGroup mappingGroup;
    private javax.swing.JTextArea mappingSourceTextArea;
    private javax.swing.JButton pasteButton;
    private javax.swing.JTextField sequenceTextField;
    private nava.ui.WiderDropDownComboBox structureComboBox;
    private javax.swing.ButtonGroup substructureGroup;
    // End of variables declaration//GEN-END:variables

    boolean reselectedRadioButtons = false;
    @Override
    public void itemStateChanged(ItemEvent e) {
        if(e.getSource().equals(structureComboBox))
        {
            SecondaryStructure structure = (SecondaryStructure) structureComboBox.getSelectedItem();
            if(structureOverlay != null)
            {
                structureOverlay.structure = structure;
                structureOverlay.substructureList = null;
                structureOverlay.substructureList = new SubstructureList(structureOverlay);
            }
               reselectedRadioButtons = true;         
        }
        update();
    }

    Color mappingWarningColor = new Color(255, 125, 0);
    Color mappingOkayColor = new Color(15,175,50);
    public void update() {
        SecondaryStructure structure = (SecondaryStructure) structureComboBox.getSelectedItem();
        if (structure != null) {
            MappingSource mappingSource = null;

            SecondaryStructureData data = (SecondaryStructureData) structure.getObject(projectModel.getProjectPathString(), MainFrame.dataSourceCache);
            MappingSource embeddedMappingSource = null;            
            if(structure.parentSource != null && structure.parentSource instanceof Alignment)
            {
                embeddedSequenceRadioButton.setEnabled(true);     
                embeddedMappingSource = new MappingSource((Alignment)structure.parentSource);     
                mappingSource = embeddedMappingSource;
                if(reselectedRadioButtons)
                {
                    embeddedSequenceRadioButton.setSelected(true);
                    reselectedRadioButtons = false;
                }
            }   
            else
            if (data.sequence.length() == 0) {
                embeddedSequenceRadioButton.setEnabled(false);
                if (embeddedSequenceRadioButton.isSelected()) {
                    fromAlignmentRadioButton.setSelected(true);
                }
            }
            else {
                embeddedSequenceRadioButton.setEnabled(true);                
                embeddedMappingSource = new MappingSource(data.sequence);
                mappingSource = embeddedMappingSource;
            }

            guessBestMappingAlignmentButton.setEnabled(false);
            if (this.embeddedSequenceRadioButton.isSelected()) {
                mappingSource = embeddedMappingSource;
            } else if (this.fromAlignmentRadioButton.isSelected()) {
                Alignment alignment = (Alignment) alignmentComboBox.getSelectedItem();
                mappingSource = new MappingSource(alignment);
                guessBestMappingAlignmentButton.setEnabled(true);
            } else if (this.fromSequenceRadioButton.isSelected()) {
                mappingSource = new MappingSource(sequenceTextField.getText());
            }

            if (structureOverlay != null && structureOverlay.structure != null &&  structureOverlay.substructureList == null) {
                structureOverlay.substructureList = new SubstructureList(structureOverlay);
                if(structureOverlay.substructureList.substructures.size() > 0)
                {
                    structureOverlay.selectedSubstructure = structureOverlay.substructureList.substructures.get(0);
                }
            }
            structureOverlay.setStructureAndMapping(structure, mappingSource);

            if (this.embeddedSequenceRadioButton.isSelected()) {
                structureOverlay.mappingSourceOption = MappingSourceOption.EMBEDDED;
            } else if (this.fromAlignmentRadioButton.isSelected()) {
                structureOverlay.mappingSourceOption = MappingSourceOption.ALIGNMENT;
            } else if (this.fromSequenceRadioButton.isSelected()) {
                structureOverlay.mappingSourceOption = MappingSourceOption.STRING;
            }

            structureOverlay.addMappingSourceAsNucleotideOverlay = addMappingAlignmentAsOverlayCheckBox.isSelected();
            structureOverlay.circular = circularRadioButton.isSelected();
            
            int dataLength = structureOverlay.pairedSites.length;
            if(mappingSource != null)
            {
                if (dataLength != mappingSource.getLength()) {
                    mappingSourceTextArea.setForeground(mappingWarningColor);
                    mappingSourceTextArea.setText("Warning: the length of the mapping source (" + mappingSource.getLength() + ") does not match the length of the data source (" + dataLength + ")");
                } else {
                    mappingSourceTextArea.setForeground(mappingOkayColor);
                    mappingSourceTextArea.setText("The length of the mapping source (" + mappingSource.getLength() + ") matches the length of the data source (" + dataLength + ")");
                }
            }
            else
            {
                if(mappingSource != null)
                {
                    mappingSourceTextArea.setForeground(mappingOkayColor);
                    mappingSourceTextArea.setText("The length of the mapping source (" + mappingSource.getLength() + ") matches the length of the data source (" + dataLength + ")");
                }
                else
                {
                    mappingSourceTextArea.setText("The length of the mapping source (" + 0 + ") matches the length of the data source (" + dataLength + ")");
                }
            }
        }
    }

    public void post() {
        update();
        structureOverlay.loadData();
        if (structureOverlay != null && structureOverlay.pairedSites != null) {
            if (structureOverlay.substructureList == null) {
                structureOverlay.substructureList = new SubstructureList(structureOverlay);
            }
        }
    }

    public void setStructureOverlay(StructureOverlay structureOverlay) {
        // TODO
        this.structureComboBoxModel.setSelectedItem(structureOverlay.structure);
        this.circularRadioButton.setSelected(structureOverlay.circular);
        switch (structureOverlay.mappingSourceOption) {
            case EMBEDDED:
                this.embeddedSequenceRadioButton.setSelected(true);
                break;
            case ALIGNMENT:
                this.fromAlignmentRadioButton.setSelected(true);         
                if(structureOverlay.mappingSource != null)
                {
                    alignmentComboBoxModel.setSelectedItem(structureOverlay.mappingSource.alignmentSource);
                }
                break;
            case STRING:
                this.fromSequenceRadioButton.setSelected(true);
                sequenceTextField.setText(structureOverlay.mappingSource.sequence);
                break;
        }
        this.structureOverlay.substructureList = structureOverlay.substructureList;
        this.addMappingAlignmentAsOverlayCheckBox.setSelected(false);
        //this.minSpinnerModel.setValue(structureSource.minStructureSize);
        //this.maxSpinnerModel.setValue(structureSource.maxStructureSize);
        //this.jCheckBox1.setSelected(structureSource.nonOverlappingSubstructures);
    }

    public StructureOverlay getStructureOverlay() {
        post();
        return structureOverlay;
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        
        update();
        /*
         * int min = (Integer) minSpinner.getValue(); int max = (Integer)
         * maxSpinner.getValue(); if (e.getSource().equals(minSpinner)) { if
         * (min > max) { maxSpinnerModel.setValue(min); } } if
         * (e.getSource().equals(maxSpinner)) { if (min > max) {
         * minSpinnerModel.setValue(max); } }
         *
         */
    }

    @Override
    public void keyTyped(KeyEvent e) {
        fromSequenceRadioButton.setSelected(true);
        update();
    }

    @Override
    public void keyPressed(KeyEvent e) {
       fromSequenceRadioButton.setSelected(true);
       update();
    }

    @Override
    public void keyReleased(KeyEvent e) {
        fromSequenceRadioButton.setSelected(true);
        update();
    }
    
    public void selectBestAlignment()
    {
        if(structureOverlay != null)
        {
            structureOverlay.loadData();
            Alignment bestAlignment = null;
            int minDifference = Integer.MAX_VALUE;
            for(int i = 0 ; i < this.alignmentComboBoxModel.getSize() ; i++)
            {
                Alignment alignment = alignmentComboBoxModel.getElementAt(i);
                int difference = Math.abs(alignment.length - structureOverlay.pairedSites.length);
                if(bestAlignment == null || difference < minDifference)
                {
                    bestAlignment = alignment;
                    minDifference = difference;
                }
            }
            alignmentComboBox.setSelectedItem(bestAlignment);
        }
    }
}
