/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nava.structurevis;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import nava.data.types.Alignment;
import nava.data.types.DataSource;
import nava.data.types.SecondaryStructure;
import nava.data.types.SecondaryStructureData;
import nava.structurevis.data.*;
import nava.ui.MainFrame;
import nava.ui.ProjectController;
import nava.utils.CustomItem;

/**
 *
 * @author Michael Golden <michaelgolden0@gmail.com>
 */
public class SubstructurePanel extends javax.swing.JPanel implements ChangeListener, ItemListener, ListDataListener, SubstructureModelListener {

    DefaultComboBoxModel<StructureSource> structureComboBoxModel = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<CustomItem> substructureComboBoxModel = new DefaultComboBoxModel<>();
    StructureVisController structureVisController;
    ProjectController projectController;
    public SubstructureDrawPanel structureDrawPanel;
    DataLegend dataLegend1D = new DataLegend();
    DataLegend dataLegend2D = new DataLegend();

    /**
     * Creates new form StructurePanel
     */
    public SubstructurePanel(StructureVisController structureVisController, ProjectController projectController) {
        initComponents();
        this.structureVisController = structureVisController;
        this.projectController = projectController;

        structureDrawPanel = new SubstructureDrawPanel(structureVisController.substructureModel);
        structureVisController.substructureModel.addSubstructureModelListener(this);
        topScrollPane.setViewportView(structureDrawPanel);

        structureComboBox.setModel(structureComboBoxModel);
        structureComboBox.addItemListener(this);

        substructureComboBox.setModel(substructureComboBoxModel);
        substructureComboBox.addItemListener(this);

        structureVisController.structureSources.addListDataListener(this);

        dataLegend1D.addChangeListener(this);
        dataLegend2D.addChangeListener(this);
        legendPanel.add(dataLegend1D);
        legendPanel.add(dataLegend2D);


        //populateStructureComboBox(Collections.list(projectController.projectModel.dataSources.elements()));
    }

    public void refresh() {
        this.populateStructureSourceComboBox();
        this.populateSubtructureComboBox();
        // TODO remember which structures/substructures were selected previously
    }

    /*
     * public void populateStructureComboBox(List<DataSource> dataSources) {
     * structureComboBoxModel.removeAllElements();
     * //mappingSourceComboBoxModel.removeAllElements(); for (DataSource
     * dataSource : dataSources) { if (dataSource instanceof SecondaryStructure)
     * { structureComboBoxModel.addElement((SecondaryStructure) dataSource); }
     * if (dataSource instanceof Alignment) { //
     * mappingSourceComboBoxModel.addElement((Alignment)dataSource); } } }
     */
    public void populateSubtructureComboBox() {
        substructureComboBoxModel.removeAllElements();
        ArrayList<Substructure> list = structureVisController.substructureModel.getSubstructures();
        for (int i = 0; i < list.size(); i++) {
            CustomItem<Substructure> item = new CustomItem<>(list.get(i), i + "");
            substructureComboBoxModel.addElement(item);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        topScrollPane = new javax.swing.JScrollPane();
        legendPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        structureComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        substructureComboBox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        topPanel.setLayout(new javax.swing.BoxLayout(topPanel, javax.swing.BoxLayout.LINE_AXIS));

        topScrollPane.setMinimumSize(new java.awt.Dimension(40, 23));
        topScrollPane.setPreferredSize(new java.awt.Dimension(500, 2));
        topPanel.add(topScrollPane);

        legendPanel.setMaximumSize(new java.awt.Dimension(150, 32767));
        legendPanel.setPreferredSize(new java.awt.Dimension(80, 289));
        legendPanel.setLayout(new javax.swing.BoxLayout(legendPanel, javax.swing.BoxLayout.PAGE_AXIS));
        topPanel.add(legendPanel);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Structure");
        jPanel2.add(jLabel1);

        structureComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(structureComboBox);

        jLabel2.setText("Substructure");
        jPanel2.add(jLabel2);

        substructureComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(substructureComboBox);

        jButton1.setText("Add structure");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        StructureDataDialog d = new StructureDataDialog(null, true, projectController.projectModel, structureVisController);
        d.setSize(640, 580);
        d.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel legendPanel;
    private javax.swing.JComboBox structureComboBox;
    private javax.swing.JComboBox substructureComboBox;
    private javax.swing.JPanel topPanel;
    private javax.swing.JScrollPane topScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource().equals(structureComboBox)) {
            StructureSource structureSource = (StructureSource) structureComboBox.getSelectedItem();
            if (structureSource != null) {
                if (structureSource.mappingSource != null) {
                    //structureVisController.addStructureSource(structureSource);
                    structureSource.loadData();
                    structureVisController.substructureModel.setStructureSource(structureSource);
                    if (structureSource.substructures.size() > 0) {
                        structureDrawPanel.openSubstructure(structureSource.substructures.get(0));
                    }
                    populateSubtructureComboBox();
                }
            }
        } else if (e.getSource().equals(substructureComboBox)) {
            CustomItem<Substructure> comboBoxItem = (CustomItem<Substructure>) substructureComboBoxModel.getSelectedItem();
            if (comboBoxItem != null) {
                structureDrawPanel.openSubstructure(comboBoxItem.getObject());
            }
        }
    }

    public void populateStructureSourceComboBox() {
        structureComboBoxModel.removeAllElements();
        ArrayList<StructureSource> list = Collections.list(structureVisController.structureSources.elements());
        for (int i = 0; i < list.size(); i++) {
            //ComboBoxItem<StructureSource> item = new ComboBoxItem<>(list.get(i), list.get(i).structure.toString());
            structureComboBoxModel.addElement(list.get(i));
        }
    }

    @Override
    public void intervalAdded(ListDataEvent e) {
        populateStructureSourceComboBox();
    }

    @Override
    public void intervalRemoved(ListDataEvent e) {
        populateStructureSourceComboBox();
    }

    @Override
    public void contentsChanged(ListDataEvent e) {
        populateStructureSourceComboBox();
    }

    @Override
    public void dataSource1DChanged(DataSource1D dataSource1D) {
        dataLegend1D.setLegend(dataSource1D.title, dataSource1D.dataTransform, dataSource1D.colorGradient, dataSource1D.defaultColorGradient);
        structureDrawPanel.redraw();
    }

    @Override
    public void dataSource2DChanged(DataSource2D dataSource2D) {
        dataLegend2D.setLegend(dataSource2D.title, dataSource2D.dataTransform, dataSource2D.colorGradient, dataSource2D.defaultColorGradient);
        structureDrawPanel.redraw();
    }

    @Override
    public void structureSourceChanged(StructureSource structureSource) {
        structureDrawPanel.redraw();
    }

    @Override
    public void annotationSourceChanged(AnnotationSource annotationSource) {
        structureDrawPanel.redraw();
    }

    @Override
    public void nucleotideSourceChanged(NucleotideComposition nucleotideSource) {
        System.out.println("Nucleotide source changed " + nucleotideSource);
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource().equals(dataLegend1D) || e.getSource().equals(dataLegend2D)) {
            System.out.println(dataLegend1D.getMinValue() + "\t" + dataLegend1D.getMaxValue() + "\t" + dataLegend2D.getMinValue() + "\t" + dataLegend2D.getMaxValue());
            structureDrawPanel.model.thresholdMin1D = dataLegend1D.getMinValue();
            structureDrawPanel.model.thresholdMax1D = dataLegend1D.getMaxValue();
            structureDrawPanel.model.thresholdMin2D = dataLegend2D.getMinValue();
            structureDrawPanel.model.thresholdMax2D = dataLegend2D.getMaxValue();
            structureDrawPanel.model.useLowerThreshold1D = !dataLegend1D.downSliderOpen;
            structureDrawPanel.model.useUpperThreshold1D = !dataLegend1D.upSliderOpen;
            structureDrawPanel.model.useLowerThreshold2D = !dataLegend2D.downSliderOpen;
            structureDrawPanel.model.useUpperThreshold2D = !dataLegend2D.upSliderOpen;
            structureDrawPanel.redraw();
        }
    }
}
